!function(){"use strict";const e=[239,187,191];var t={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let n;const o=new Uint8Array(16);function a(){if(!n&&(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!n))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(o)}const r=[];for(let e=0;e<256;++e)r.push((e+256).toString(16).slice(1));var s=function(e,n,o){if(t.randomUUID&&!n&&!e)return t.randomUUID();const s=(e=e||{}).random||(e.rng||a)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,n){o=o||0;for(let e=0;e<16;++e)n[o+e]=s[e];return n}return function(e,t=0){return(r[e[t+0]]+r[e[t+1]]+r[e[t+2]]+r[e[t+3]]+"-"+r[e[t+4]]+r[e[t+5]]+"-"+r[e[t+6]]+r[e[t+7]]+"-"+r[e[t+8]]+r[e[t+9]]+"-"+r[e[t+10]]+r[e[t+11]]+r[e[t+12]]+r[e[t+13]]+r[e[t+14]]+r[e[t+15]]).toLowerCase()}(s)};let i,c;const l={standard:"A network or API error occurred! Please wait a minute and try again.",prompt:"Invalid prompt.",denied:"ChatGPT says you are sending too many requests in a row. Please slow down before sending another request.",abort:"User aborted search.",timeout:"ChatGPT timeout. Please try again later."};async function u(t,n,o){let a,r=null,u=!1,d=Date.now();const p=o?"Limit your response to 130 characters:\n"+n:n;try{if(null==n||""===n.trim())throw new Error("prompt");i=new AbortController,c=setTimeout((()=>i.abort("timeout")),3e3);const o=await async function(e,t){const n=await fetch("https://chat.openai.com/backend-api/models",{method:"GET",signal:null==t?null:t.signal,headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`}});return(await n.json()).models[0].slug}(t,i);return clearTimeout(c),c=setTimeout((()=>i.abort("timeout")),15e3),await async function(t,o,i,l,p){const m=await fetch("https://chat.openai.com/backend-api/conversation",{method:"POST",signal:null==t?null:t.signal,headers:{"Content-Type":"application/json",Authorization:`Bearer ${o}`},body:JSON.stringify({action:"next",messages:[{id:s(),role:"user",content:{content_type:"text",parts:[i]}}],model:l,parent_message_id:s()})});if(!m.ok)throw new Error("fetch");const h=function(t){let n,o,a,r,s,i,c;return l(),{feed:function(t){o=o?o+t:t,n&&function(t){return e.every(((e,n)=>t.charCodeAt(n)===e))}(o)&&(o=o.slice(e.length)),n=!1;const s=o.length;let i=0,c=!1;for(;i<s;){c&&("\n"===o[i]&&++i,c=!1);let e,t=-1,n=r;for(let r=a;t<0&&r<s;++r)e=o[r],":"===e&&n<0?n=r-i:"\r"===e?(c=!0,t=r-i):"\n"===e&&(t=r-i);if(t<0){a=s-i,r=n;break}a=0,r=-1,u(o,i,n,t),i+=t+1}i===s?o="":i>0&&(o=o.slice(i))},reset:l};function l(){n=!0,o="",a=0,r=-1,s=void 0,i=void 0,c=""}function u(e,n,o,a){if(0===a)return c.length>0&&(t({type:"event",id:s,event:i||void 0,data:c.slice(0,-1)}),c="",s=void 0),void(i=void 0);const r=o<0,l=e.slice(n,n+(r?a:o));let u=0;u=r?a:" "===e[n+o+1]?o+2:o+1;const d=n+u,p=a-u,m=e.slice(d,d+p).toString();if("data"===l)c+=m?"".concat(m,"\n"):"\n";else if("event"===l)i=m;else if("id"!==l||m.includes("\0")){if("retry"===l){const e=parseInt(m,10);Number.isNaN(e)||t({type:"reconnect-interval",value:e})}}else s=m}}((e=>{"event"===e.type&&(e=>{if("[DONE]"!==e)try{const t=JSON.parse(e);u||(clearTimeout(c),u=!0),r!=t.conversation_id&&(r=t.conversation_id),a=t.message.content.parts[0];const o=Date.now();o-d>250&&(g("query",[n,t.message.content.parts[0],!1]),d=o)}catch(e){return}})(e.data)}));for await(const e of async function*(e){const t=e.getReader();try{for(;;){const{done:e,value:n}=await t.read();if(e)return;yield n}}finally{t.releaseLock()}}(m.body)){const t=(new TextDecoder).decode(e);h.feed(t)}}(i,t,p,o),c=setTimeout((()=>i.abort("timeout")),3e3),await async function(e,t,n){await fetch("https://chat.openai.com/backend-api/conversation/"+e,{method:"PATCH",signal:null==n?null:n.signal,headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify({is_visible:!1})})}(r,t,i),clearTimeout(c),[a,!1]}catch(e){return console.log(e),clearTimeout(c),null==i||"prompt"===e.message?[l.prompt,!0]:"user"===i.signal.reason?[l.abort,!0]:"timeout"===i.signal.reason?[l.timeout,!0]:"fetch"===e.message?[l.denied,!0]:[l.standard,!0]}}chrome.runtime.onInstalled.addListener((async e=>{"install"===e.reason&&chrome.runtime.openOptionsPage(),("install"===e.reason||"update"===e.reason)&&chrome.runtime.setUninstallURL&&chrome.runtime.setUninstallURL("https://docs.google.com/forms/d/e/1FAIpQLSdv3c9RmDmphP1pihYgmNmV6DJ_UxMXq6NNi1oOW5XsIhyxOg/viewform?usp=sf_link"),"update"===e.reason&&"true"==await f("loading")&&g("loading","false")})),chrome.contextMenus.removeAll((()=>{chrome.contextMenus.create({id:"3",title:"Search + get response as notification",contexts:["selection"]})})),chrome.runtime.onMessage.addListener(((e,t,n)=>{switch(e.type){case"query":return p(e),!0;case"callAPI":return d(e).then((()=>{n()})),!0;case"abort":return m().then((()=>{n()})),!0}})),chrome.contextMenus.onClicked.addListener((async e=>{const t=await f("loading");if(null==t||"false"===t){const t=new AbortController;setTimeout((()=>t.abort("timeout")),5e3);try{const n=await fetch("https://chat.openai.com/api/auth/session",{signal:null==t?null:t.signal});if(403===n.status)h("Error!!!","Open the GptGO popup and sign in before sending search requests");else{const t=await n.json().catch((()=>({})));if(t.accessToken){await g("loading","true"),await g("query",[e.selectionText,null,!1]);const n=await u(t.accessToken,e.selectionText,!0);await g("query",[e.selectionText,n[0],n[1]]),await g("loading","false"),h(!0===n[1]?"Error!!!":"Response to: "+e.selectionText,n[0].replace(/\n/g,""))}else h("Error!!!","Open the GptGO popup and sign in before sending search requests")}}catch(e){console.log(e),h("Error!!!","There was a problem connecting to ChatGPT")}}}));const d=async e=>{await g("loading","true"),await g("query",[e.query,null,!1]);const t=await f("accessToken"),n=await u(t,e.query,!1);await g("query",[e.query,n[0],n[1]]),await g("loading","false")},p=async e=>{const t=await f("loading");null!=t&&"false"!==t||await g("query",[e.payload,null,!1])},m=async()=>{i.abort("user")},h=(e,t)=>{chrome.notifications.create("",{title:e,type:"basic",message:t,iconUrl:"images/logo192.png"})},f=async e=>(await chrome.storage.local.get([e]))[e],g=async(e,t)=>{await chrome.storage.local.set({[e]:t})}}();